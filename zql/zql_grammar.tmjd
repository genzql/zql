root              : zql
                  ;
zql               : statement
                  ;
statement         : query_stmt
                  | definition_stmt terminal
                  | manipulation_stmt terminal
                  ;
query_stmt        : explain query
                  | query
                  ;
query             : cte_clause simple_query
                  | simple_query
                  ;
cte_clause        : with cte_list
                  ;
cte_list          : aliased_sub_query comma cte_list
                  | aliased_sub_query
                  ;
aliased_sub_query : sub_query alias word
                  ;
sub_query         : open_paren simple_query close_paren 
                  ;
simple_query      : select_query
                  ;
select_query      : select_clause from_query
                  > "{select_clause}\n{from_query}"
                  | select_clause
                  ;
from_query        : from_clause where_query
                  > "{from_clause}\n{where_query}"
                  | from_clause
                  | where_query
                  ;
where_query       : where_clause groupby_query
                  > "{where_clause}\n{groupby_query}"
                  | where_clause
                  | groupby_query
                  ;
groupby_query     : groupby_clause having_query
                  > "{groupby_clause}\n{having_query}"
                  | groupby_clause
                  | having_query
                  ;
having_query      : having_clause orderby_query
                  > "{having_clause}\n{orderby_query}"
                  | having_clause
                  | orderby_query
                  ;
orderby_query     : orderby_clause limit_query
                  > "{orderby_clause}\n{limit_query}"
                  | orderby_clause
                  | limit_query
                  ;
limit_query       : limit_clause union_query
                  > "{limit_clause}\n{union_query}"
                  | limit_clause
                  | union_query
                  ;
union_query       : union_clause simple_query
                  > "{union_clause}\n{simple_query}"
                  | terminal
                  ;
select_clause     : select distinct select_expr_list
                  | select select_expr_list
                  ;
select_expr_list  : select_expr comma select_expr_list
                  > "{select_expr}, {select_expr_list}"
                  | select_expr
                  ;
select_expr       : star
                  | expression alias word
                  | expression
                  ;
star              : r(shee)(e)*(sh)
                  > "*"
                  ;
expr_list         : expression comma expr_list
                  > "{expression}, {expr_list}"
                  | expression
                  ;
expression        : single_expr operator single_expr
                  | single_expr postfix_expr
                  > "{postfix_expr}({single_expr})"
                  | single_expr
                  ;
postfix_expr      : sum
                  ;
single_expr       : function_expr
                  | dot_expression
                  | word
                  | quoted_expr
                  | float
                  | integer
                  ;
quoted_expr       : r\".*?\"
                  | r\'.*?\'
                  ;
float             : whole dot fractional
                  > "{whole}.{fractional}"
                  ;
whole             : integer
                  ;
fractional        : integer
                  ;
integer           : r[0-9]+
                  ;
word              : r[a-zA-Z][\w$]*
                  ;
dot_expression    : word dot word
                  ;
operator          : equal
                  | not_equal
                  | is
                  | is_not
                  | cond_operator
                  | comp_operator
                  | math_operator
                  ;
cond_operator     : and
                  | or
                  ;
comp_operator     : lte
                  | gte
                  | lt
                  | gt
                  ;
math_operator     : plus
                  | minus
                  | multiply
                  | divide
                  ;
function_expr     : function_name open_paren function_args close_paren
                  > "{function_name}({function_args})"
                  ;
function_args     : distinct arg_list
                  | arg_list
                  ;
function_name     : word
                  ;
arg_list          : expression comma arg_list
                  | expression
                  ;
from_clause       : from table join_list
                  > "{from} {table}\n{join_list}"
                  | from table
                  ;
table             : sub_query alias word
                  | sub_query word
                  | sub_query
                  | table_name
                  ;
table_name        : word alias word
                  | word
                  ;
join_list         : join_clause join_list
                  > "{join_clause}\n{join_list}"
                  | join_clause
                  ;
join_clause       : comma table 
                  | join_with_type table join_on condition_list
                  > "{join_with_type} {table}\n{join_on} {condition_list}"
                  ;
join_with_type    : join join_type
                  > "{join_type} {join}"
                  | join
                  ;
where_clause      : where condition_list
                  ;
condition_list    : expression cond_operator condition_list
                  > "{expression}\n{cond_operator} {condition_list}"
                  | expression
                  ;
groupby_clause    : groupby_start expr_list groupby_end
                  > "GROUP BY {expr_list}"
                  ;
having_clause     : having_start condition_list having_end
                  > "HAVING {condition_list}"
                  ;
orderby_clause    : orderby orderby_list
                  > "ORDER BY {orderby_list}"
                  ;
orderby_list      : orderby_expr comma orderby_list
                  > "{orderby_expr}, {orderby_list}"
                  | orderby_expr
                  ;
orderby_expr      : expression direction
                  ;
direction         : nulls_first
                  | nulls_last
                  | asc
                  | desc
                  ;
limit_clause      : limit limit_amount
                  ;
limit_amount      : integer
                  ;
union_clause      : union_all
                  | union
                  ;
definition_stmt   : create_stmt
                  | drop_stmt
                  ;
create_stmt       : create_db_stmt
                  | create_table_stmt
                  ;
create_db_stmt    : create_db if_not_exists word
                  | create_db word
                  ;
create_table_stmt : create_table if_not_exists db_table alias table_definition
                  ;
table_definition  : open_paren column_def_list close_paren
                  ;
column_def_list   : column_def comma column_def_list
                  | column_def
                  ;
column_def        : word column_type_expr
                  ;
column_type_expr  : column_type expr_list
                  | column_type
                  ;
column_type       : function_expr
                  | word
                  ;
drop_stmt         : drop_db_stmt
                  | drop_table_stmt
                  ;
drop_db_stmt      : drop_db word if_exists
                  | drop_db word
                  ;
drop_table_stmt   : drop_table db_table if_exists
                  | drop_table db_table
                  ;
db_table          : word dot word
                  | word
                  ;
manipulation_stmt : insert_stmt
                  ;
insert_stmt       : insert_into db_table open_paren expr_list close_paren
                  ;
with              : "perchance"
                  > "WITH"
                  ;
select            : "its giving"
                  > "SELECT"
                  ;
distinct          : "real ones"
                  > "DISTINCT"
                  ;
sum               : "af"
                  > "SUM"
                  ;
from              : "yass"
                  > "FROM"
                  ;
join              : "come through"
                  > "JOIN"
                  ;
join_on           : "bet"
                  > "ON"
                  ;
join_type         : join_inner
                  | join_left
                  | join_left_outer
                  | join_right
                  | join_right_outer
                  | join_full_outer
                  | join_cross
                  ;
join_inner        : "inner"
                  > "INNER"
                  ;
join_left         : "left"
                  > "LEFT"
                  ;
join_left_outer   : "left outer"
                  > "LEFT OUTER"
                  ;
join_right        : "right"
                  > "RIGHT"
                  ;
join_right_outer  : "right outer"
                  > "RIGHT OUTER"
                  ;
join_full_outer   : "full outer"
                  > "FULL OUTER"
                  ;
join_cross        : "cross"
                  > "CROSS"
                  ;
where             : "tfw"
                  > "WHERE"
                  ;
and               : "fax"
                  > "AND"
                  ;
or                : "uh"
                  > "OR"
                  ;
is                : "be"
                  > "IS"
                  ;
is_not            : "sike"
                  > "IS NOT"
                  ;
equal             : "be"
                  > "="
                  ;
not_equal         : "sike"
                  > "!="
                  ;
lte               : "kinda flops"
                  > "<="
                  ;
gte               : "kinda bops"
                  > ">="
                  ;
lt                : "flops"
                  > "<"
                  ;
gt                : "bops"
                  > ">"
                  ;
plus              : "+"
                  ;
minus             : "-"
                  ;
multiply          : "*"
                  ;
divide            : "/"
                  ;
groupby_start     : "let"
                  ;
groupby_end       : "cook"
                  ;
having_start      : "catch these"
                  ;
having_end        : "hands"
                  ;
orderby           : "ngl"
                  ;
nulls_first       : "high key yikes"
                  > "NULLS FIRST"
                  ;
nulls_last        : "low key yikes"
                  > "NULLS LAST"
                  ;
asc               : "low key"
                  > "ASC"
                  ;
desc              : "high key"
                  > "DESC"
                  ;
limit             : "say less"
                  > "LIMIT"
                  ;
union_all         : "with all the bois"
                  > "UNION ALL"
                  ;
union             : "with the bois"
                  > "UNION"
                  ;
explain           : "whats good with"
                  > "EXPLAIN"
                  ;
dot               : "."
                  ;
comma             : ","
                  ;
open_paren        : "("
                  ;
close_paren       : ")"
                  ;
alias             : "be"
                  > "AS"
                  ;
create_db         : "built different queen"
                  > "CREATE DATABASE"
                  ;
create_table      : "built different girlie"
                  > "CREATE TABLE"
                  ;
drop_db           : "yeet queen"
                  > "DROP DATABASE"
                  ;
drop_table        : "yeet girlie"
                  > "DROP TABLE"
                  ;
if_not_exists     : "or nah"
                  > "IF NOT EXISTS"
                  ;
if_exists         : "or nah"
                  > "IF EXISTS"
                  ;
insert_into       : "pushin p into"
                  > "INSERT INTO"
                  ;
terminal          : "no cap"
                  > ";"
                  ;
